# This is the bcp config file for Saggitarius. Any variables that are prone to change should go in this file.

main:
{
  logpath = "/home/mayukh/bcp/Sag/log/main_sag.log";
  cmdlog = "/home/mayukh/bcp/Sag/log/cmds_sag.log";
};

rfsoc_spectrometer:
{
  enabled = 1;
  ip_address = "172.20.3.12";
  mode = "cx";
  data_save_interval = 600;
  data_save_path = "/media/saggitarius/T7";
  fpga_bitstream = "./rfsoc4x2_tut_spec_cx/outputs/rfsoc4x2_tut_spec_cx_2023-04-03_1141.fpg";
  fpga_bitstream_479khz = "./rfsoc4x2_tut_spec_cx/outputs/rfsoc4x2_tut_spec_cx_2025-04-09_1051.fpg";
  adc_channel = 0;
  accumulation_length = 262144;  # 2*(2^28) // 2048
  num_channels = 8;
  num_fft_points = 2048;
  
  # Power control settings
  pbob_id = 0;                   # PBoB number for RFSoC power control
  relay_id = 0;                  # Relay number for RFSoC power control
};

gps:
{
  enabled = 1;
  port = "/dev/ttyGPS";
  baud_rate = 19200;
  data_save_path = "/media/saggitarius/T7/GPS_data";
  file_rotation_interval = 14400;  # 4 hours in seconds
  
  # UDP server settings for GPS data transmission
  udp_server_enabled = 1;
  udp_server_port = 8080;
  udp_buffer_size = 1024;
  udp_client_ips = ["172.20.3.11", "100.118.151.75"];  # Authorized client IPs
  
  # Power control settings
  pbob_id = 1;                   # PBoB number for GPS power control
  relay_id = 2;                  # Relay number for GPS power control
}; 

spectrometer_server:
{
  enabled = 1;
  udp_server_port = 8081;
  udp_buffer_size = 32768;        # Large enough for standard spectrum data
  max_request_rate = 1;           # Max 1 request per second per client
  # IP authorization removed - accepts all clients
  
  # High-resolution filtering parameters for water maser (120kHz version)
  water_maser_freq = 22.235;      # GHz - H2O maser line frequency
  zoom_window_width = 0.010;      # GHz - ±10 MHz window around maser line
  if_lower = 20.96608;            # GHz - IF frequency range lower bound
  if_upper = 22.93216;            # GHz - IF frequency range upper bound
}; 

telemetry_server:
{
  enabled = 1;
  ip = "0.0.0.0";                 # Listen on all interfaces
  port = 8082;                    # Telemetry server port
  timeout = 100000;               # Socket timeout in microseconds (100ms)
  udp_buffer_size = 1024;         # Buffer size for telemetry data
  # IP authorization removed - accepts all clients
};

pbob_client:
{
  enabled = 1;
  ip = "172.20.3.11";             # Oph IP address
  port = 8003;                    # PBoB server port
  timeout = 5000;                 # Timeout in milliseconds
}; 

vlbi:
{
  enabled = 1;
  aquila_ip = "172.20.3.13";      # Aquila storage computer IP address
  aquila_port = 8004;             # VLBI daemon port
  timeout = 10000;                # TCP timeout in milliseconds
  ping_timeout = 5;               # Ping timeout in seconds
  status_check_interval = 10;     # Status check interval in seconds
};

rfsoc_daemon:
{
  enabled = 1;
  rfsoc_ip = "172.20.3.12";       # RFSoC IP address
  rfsoc_port = 8005;              # RFSoC clock daemon port
  timeout = 20000;                # TCP timeout in milliseconds (increased for clock config)
}; 

ticc:
{
  enabled = 1;
  port = "/dev/ttyACM0";          # Serial port for TICC/Arduino Mega
  baud_rate = 115200;             # Serial communication baud rate
  data_save_path = "/media/saggitarius/T7/TICC_data";  # Path to save TICC data files
  file_rotation_interval = 3600;   # 1 hour in seconds - rotate data files
  
  # Power control settings
  pbob_id = 1;                    # PBoB number for timing chain power control
  relay_id = 5;                   # Relay number for timing chain power control
}; 

heaters:
{
  enabled = 1;
  logfile = "log/heater.log";
  heater_ip = "172.20.3.16";
  pbob_id = 2;
  relay_id = 0;
  port = 8006;
  server_ip = "0.0.0.0";
  workdir = "./heaters_data";
  current_cap = 3;                # amps
  timeout = 20000;
};

position_sensors:
{
  enabled = 1;
  pi_ip = "192.168.0.23";           # Raspberry Pi IP address
  pi_port = 65432;                  # TCP port for position sensor data
  data_save_path = "/media/saggitarius/T7/position_tracking_data";  # Data storage path
  connection_timeout = 10;          # Connection timeout in seconds
  retry_attempts = 5;               # Number of connection retry attempts
  script_path = "./sh_scripts/run_pos_sensors.sh";  # Path to orchestration script
  telemetry_rate_hz = 10;           # SPI gyro telemetry transmission rate (Hz)
};

pr59:
{
  enabled = 1;
  port = "/dev/tec-controller";   # Serial port for PR59 TEC controller
  setpoint_temp = 25.0;           # Target temperature in °C
  kp = 30.0;                      # PID proportional gain
  ki = 0.031;                     # PID integral gain
  kd = 360.0;                     # PID derivative gain  
  deadband = 0.1;                 # Temperature deadband in °C
  data_save_path = "/media/saggitarius/T7/PR59_data";  # Path to save TEC log files
};

cmd_server:
{
  port = 8090;                    # Port for command server
  timeout = 5;                    # Timeout in seconds for command reception
}; 
